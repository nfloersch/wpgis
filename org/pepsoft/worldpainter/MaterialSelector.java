/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pepsoft.worldpainter;

import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.JSpinner.NumberEditor;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import static org.pepsoft.minecraft.Constants.*;
import org.pepsoft.minecraft.Material;
import org.pepsoft.worldpainter.MixedMaterial.Row;

/**
 *
 * @author pepijn
 */
public class MaterialSelector extends javax.swing.JPanel implements ChangeListener {
    /**
     * Creates new form MaterialSelector
     */
    public MaterialSelector() {
        initComponents();
        
        spinnerDataValue.setEditor(new NumberEditor(spinnerDataValue, "0"));
        spinnerOccurrence.setEditor(new NumberEditor(spinnerOccurrence, "0"));
        spinnerOccurrence.addChangeListener(this);
        JSpinner.NumberEditor scaleEditor = new JSpinner.NumberEditor(spinnerScale, "0");
        scaleEditor.getTextField().setColumns(3);
        spinnerScale.setEditor(scaleEditor);
    }

    public MaterialSelector(Row mixedMaterialRow) {
        initComponents();
        setMixedMaterialRow(mixedMaterialRow);
    }

    public final void setMixedMaterialRow(Row mixedMaterialRow) {
        comboBoxBlockId.setSelectedIndex(mixedMaterialRow.material.getBlockType());
        spinnerDataValue.setValue(mixedMaterialRow.material.getData());
        spinnerOccurrence.setValue(mixedMaterialRow.occurrence);
        spinnerScale.setValue((int) (mixedMaterialRow.scale * 100.0f + 0.5f));
    }
    
    public final Row getMixedMaterialRow() {
        return new Row(Material.get(comboBoxBlockId.getSelectedIndex(), (Integer) spinnerDataValue.getValue()), (Integer) spinnerOccurrence.getValue(), (Integer) spinnerScale.getValue() / 100.0f);
    }
    
    public boolean isOccurrenceEnabled() {
        return spinnerOccurrence.isEnabled();
    }
    
    public void setOccurrenceEnabled(boolean occurrenceEnabled) {
        spinnerOccurrence.setEnabled(occurrenceEnabled);
    }
    
    public int getOccurrence() {
        return (Integer) spinnerOccurrence.getValue();
    }
    
    public void setOccurrence(int occurrence) {
        spinnerOccurrence.setValue(occurrence);
        if (occurrence < 0) {
            spinnerOccurrence.setForeground(Color.RED);
        } else {
            spinnerOccurrence.setForeground(null);
        }
    }
    
    public void setListener(Listener listener) {
        this.listener = listener;
    }
    
    public Listener getListener() {
        return listener;
    }
    
    // StateListener

    @Override
    public void stateChanged(ChangeEvent e) {
        if ((listener != null) && spinnerOccurrence.isEnabled()) {
            listener.occurrenceChanged((Integer) spinnerOccurrence.getValue());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBoxBlockId = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        spinnerDataValue = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        spinnerOccurrence = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spinnerScale = new javax.swing.JSpinner();

        jLabel1.setText("Block ID:");

        comboBoxBlockId.setModel(new DefaultComboBoxModel(BLOCK_TYPES));

        jLabel3.setText("Data value:");

        spinnerDataValue.setModel(new javax.swing.SpinnerNumberModel(0, 0, 15, 1));

        jLabel2.setText("Occurrence:");

        spinnerOccurrence.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 1));

        jLabel4.setText("Scale:");

        jLabel5.setText("â€°");

        spinnerScale.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(1)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxBlockId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerDataValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerOccurrence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxBlockId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(spinnerDataValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerOccurrence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(spinnerScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxBlockId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSpinner spinnerDataValue;
    private javax.swing.JSpinner spinnerOccurrence;
    private javax.swing.JSpinner spinnerScale;
    // End of variables declaration//GEN-END:variables

    private Listener listener;
    
    private static final String[] BLOCK_TYPES = new String[256];
    private static final long serialVersionUID = 1L;
    
    static {
        for (int i = 0; i < 256; i++) {
            if ((i >= BLOCK_TYPE_NAMES.length) || (BLOCK_TYPE_NAMES[i] == null)) {
                BLOCK_TYPES[i] = Integer.toString(i);
            } else {
                BLOCK_TYPES[i] = i + " " + BLOCK_TYPE_NAMES[i];
            }
        }
    }
    
    public interface Listener {
        void occurrenceChanged(int newOccurrence);
    }
}